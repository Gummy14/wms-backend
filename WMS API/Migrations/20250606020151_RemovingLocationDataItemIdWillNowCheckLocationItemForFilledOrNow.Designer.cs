// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS_API.DbContexts;

#nullable disable

namespace WMS_API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250606020151_RemovingLocationDataItemIdWillNowCheckLocationItemForFilledOrNow")]
    partial class RemovingLocationDataItemIdWillNowCheckLocationItemForFilledOrNow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WMS_API.Models.Boxes.Box", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Boxes");

                    b.ToTable("Boxes", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.BoxData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.HasKey("EventId")
                        .HasName("PK_BoxData");

                    b.HasIndex("BoxId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("TruckId");

                    b.ToTable("BoxData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Items");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Items.ItemData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BoxId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ItemType")
                        .HasColumnType("char(36)");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WeightInKilograms")
                        .HasColumnType("float");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.HasKey("EventId")
                        .HasName("PK_ItemData");

                    b.HasIndex("BoxId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.ToTable("ItemData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LocationParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Locations");

                    b.HasIndex("LocationParentId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Locations.LocationData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<float>("MaxWeightInKilograms")
                        .HasColumnType("float");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.Property<int>("XCoordinate")
                        .HasColumnType("int");

                    b.Property<int>("YCoordinate")
                        .HasColumnType("int");

                    b.Property<int>("ZCoordinate")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK_LocationData");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_Addresses");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Orders");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.OrderData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId")
                        .HasName("PK_OrderData");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Shipments.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Shipments");

                    b.ToTable("Shipments", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Shipments.ShipmentData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId")
                        .HasName("PK_ShipmentData");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Trucks.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ArrivalDateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DepartureDateTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Addresses");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Trucks", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.BoxData", b =>
                {
                    b.HasOne("WMS_API.Models.Boxes.Box", null)
                        .WithMany("BoxData")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithMany("OrderBox")
                        .HasForeignKey("OrderId");

                    b.HasOne("WMS_API.Models.Shipments.Shipment", null)
                        .WithMany("ShipmentBoxes")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("WMS_API.Models.Trucks.Truck", null)
                        .WithMany("BoxesLoadedOntoTruck")
                        .HasForeignKey("TruckId");
                });

            modelBuilder.Entity("WMS_API.Models.Items.ItemData", b =>
                {
                    b.HasOne("WMS_API.Models.Boxes.Box", null)
                        .WithMany("BoxItems")
                        .HasForeignKey("BoxId");

                    b.HasOne("WMS_API.Models.Items.Item", null)
                        .WithMany("ItemData")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS_API.Models.Locations.Location", null)
                        .WithMany("LocationItem")
                        .HasForeignKey("LocationId");

                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("WMS_API.Models.Locations.Location", b =>
                {
                    b.HasOne("WMS_API.Models.Locations.Location", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("LocationParentId");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("WMS_API.Models.Locations.LocationData", b =>
                {
                    b.HasOne("WMS_API.Models.Locations.Location", null)
                        .WithMany("LocationData")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Address", b =>
                {
                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithOne("Address")
                        .HasForeignKey("WMS_API.Models.Orders.Address", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Orders.OrderData", b =>
                {
                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithMany("OrderData")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Shipments.ShipmentData", b =>
                {
                    b.HasOne("WMS_API.Models.Shipments.Shipment", null)
                        .WithMany("ShipmentData")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Trucks.Truck", b =>
                {
                    b.HasOne("WMS_API.Models.Shipments.Shipment", null)
                        .WithMany("TruckData")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.Box", b =>
                {
                    b.Navigation("BoxData");

                    b.Navigation("BoxItems");
                });

            modelBuilder.Entity("WMS_API.Models.Items.Item", b =>
                {
                    b.Navigation("ItemData");
                });

            modelBuilder.Entity("WMS_API.Models.Locations.Location", b =>
                {
                    b.Navigation("LocationData");

                    b.Navigation("LocationItem");

                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Order", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("OrderBox");

                    b.Navigation("OrderData");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WMS_API.Models.Shipments.Shipment", b =>
                {
                    b.Navigation("ShipmentBoxes");

                    b.Navigation("ShipmentData");

                    b.Navigation("TruckData");
                });

            modelBuilder.Entity("WMS_API.Models.Trucks.Truck", b =>
                {
                    b.Navigation("BoxesLoadedOntoTruck");
                });
#pragma warning restore 612, 618
        }
    }
}
