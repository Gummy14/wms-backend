// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS_API.DbContexts;

#nullable disable

namespace WMS_API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250414210623_AddingBoxDataObjectToOrder")]
    partial class AddingBoxDataObjectToOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WMS_API.Models.Boxes.Box", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Boxes");

                    b.ToTable("Boxes", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.BoxData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.HasKey("EventId")
                        .HasName("PK_BoxData");

                    b.HasIndex("BoxId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("BoxData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Containers.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Containers");

                    b.ToTable("Containers", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Containers.ContainerData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId")
                        .HasName("PK_ContainerData");

                    b.HasIndex("ContainerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ContainerData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Events.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_EventTypes");

                    b.ToTable("EventTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 111,
                            EventTypeDescription = "Location Occupied"
                        },
                        new
                        {
                            Id = 110,
                            EventTypeDescription = "Location Unoccupied"
                        },
                        new
                        {
                            Id = 211,
                            EventTypeDescription = "Container In Use"
                        },
                        new
                        {
                            Id = 210,
                            EventTypeDescription = "Container Not In Use"
                        },
                        new
                        {
                            Id = 310,
                            EventTypeDescription = "Item Registered"
                        },
                        new
                        {
                            Id = 410,
                            EventTypeDescription = "Item Putaway Into Location"
                        },
                        new
                        {
                            Id = 510,
                            EventTypeDescription = "Order Newly Registered, Waiting To Be Selected For Picking"
                        },
                        new
                        {
                            Id = 511,
                            EventTypeDescription = "Item Added To Order"
                        },
                        new
                        {
                            Id = 520,
                            EventTypeDescription = "Order Selected For Picking, Picking In Progress"
                        },
                        new
                        {
                            Id = 522,
                            EventTypeDescription = "Item Picked Into Container"
                        });
                });

            modelBuilder.Entity("WMS_API.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Items");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Items.ItemData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BoxId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContainerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("char(36)");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WeightInKilograms")
                        .HasColumnType("float");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.HasKey("EventId")
                        .HasName("PK_ItemData");

                    b.HasIndex("BoxId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.ToTable("ItemData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Locations");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Locations.LocationData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("char(36)");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("float");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<float>("MaxWeightInKilograms")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("float");

                    b.HasKey("EventId")
                        .HasName("PK_LocationData");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id")
                        .HasName("PK_Addresses");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_Orders");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Orders.OrderData", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NextEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevEventId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId")
                        .HasName("PK_OrderData");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderData", (string)null);
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.BoxData", b =>
                {
                    b.HasOne("WMS_API.Models.Boxes.Box", null)
                        .WithMany("BoxDataHistory")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithOne("BoxUsedToPackOrder")
                        .HasForeignKey("WMS_API.Models.Boxes.BoxData", "OrderId");
                });

            modelBuilder.Entity("WMS_API.Models.Containers.ContainerData", b =>
                {
                    b.HasOne("WMS_API.Models.Containers.Container", null)
                        .WithMany("ContainerDataHistory")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithOne("ContainerUsedToPickOrder")
                        .HasForeignKey("WMS_API.Models.Containers.ContainerData", "OrderId");
                });

            modelBuilder.Entity("WMS_API.Models.Items.ItemData", b =>
                {
                    b.HasOne("WMS_API.Models.Boxes.Box", null)
                        .WithMany("BoxItems")
                        .HasForeignKey("BoxId");

                    b.HasOne("WMS_API.Models.Containers.Container", null)
                        .WithMany("ContainerItems")
                        .HasForeignKey("ContainerId");

                    b.HasOne("WMS_API.Models.Items.Item", null)
                        .WithMany("ItemDataHistory")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS_API.Models.Locations.Location", null)
                        .WithMany("Item")
                        .HasForeignKey("LocationId");

                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("WMS_API.Models.Locations.LocationData", b =>
                {
                    b.HasOne("WMS_API.Models.Items.Item", null)
                        .WithMany("Location")
                        .HasForeignKey("ItemId");

                    b.HasOne("WMS_API.Models.Locations.Location", null)
                        .WithMany("LocationDataHistory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Address", b =>
                {
                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithOne("Address")
                        .HasForeignKey("WMS_API.Models.Orders.Address", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Orders.OrderData", b =>
                {
                    b.HasOne("WMS_API.Models.Orders.Order", null)
                        .WithMany("OrderDataHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS_API.Models.Boxes.Box", b =>
                {
                    b.Navigation("BoxDataHistory");

                    b.Navigation("BoxItems");
                });

            modelBuilder.Entity("WMS_API.Models.Containers.Container", b =>
                {
                    b.Navigation("ContainerDataHistory");

                    b.Navigation("ContainerItems");
                });

            modelBuilder.Entity("WMS_API.Models.Items.Item", b =>
                {
                    b.Navigation("ItemDataHistory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WMS_API.Models.Locations.Location", b =>
                {
                    b.Navigation("Item");

                    b.Navigation("LocationDataHistory");
                });

            modelBuilder.Entity("WMS_API.Models.Orders.Order", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BoxUsedToPackOrder")
                        .IsRequired();

                    b.Navigation("ContainerUsedToPickOrder")
                        .IsRequired();

                    b.Navigation("OrderDataHistory");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
